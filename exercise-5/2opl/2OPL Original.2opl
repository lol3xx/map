//
// Solution without temporal norms.
//

Facts:
  // model of the world
  chest(1, 1).

  // this fact will be removed once the Wumpus is dead
  wumpus(1, 3).

  pit(3, 1).
  pit(3, 3).
  pit(4, 4).
  gold(2, 3).

  // the agent stands on the chest initially
  position(1, 1).
  moves(0).

  // no points initially
  points(0).

  // accumulated penalties for standing on pits
  pitpoints(0).

  // description texts
  description(final_grade, 'Final Grade: ').
  description(found_gold, 'Found the gold: ').
  description(picked_up_gold, 'Picked up the gold: ').
  description(stood_on_pit, 'Stood on pit: ').
  description(delivered_gold, 'Delivered the gold: ').
  description(shortest_path, 'Shortest path: ').
  description(stood_on_wumpus, 'Stood on wumpus: ').

  // addition
  add(X, Y, Z) :- Z is X + Y.

Effects:
  // movement
  { position(X, Y) and add(X, DX, NX) and add(Y, DY, NY) and moves(M) and add(M, 1, NM) }
    move(DX, DY)
  { not position(X, Y) and position(NX, NY) and not moves(M) and moves(NM) }

  // picking up the gold
  // only possible if there is gold at the current position
  { position(X, Y) and gold(X, Y) and moves(M) }
    gripper(pickup)
  { picked_up_gold(M) and not gold(X, Y) }

  // dropping the gold
  // only possible if the agent is at the chest and carries gold
  { position(X, Y) and chest(X, Y) and picked_up_gold(_) and not dropped_gold(_) and moves(M) }
    gripper(drop)
  { dropped_gold(M) }

Counts-as:
  // standing on a pit is a violation
  position(X, Y) and pit(X, Y) => viol(dont_stand_on_pit).

  // standing on a living wumpus is a violation
  position(X, Y) and wumpus(X, Y) => viol(dont_stand_on_wumpus(X, Y)).

  // finding the gold is an obligation
  // remember the moves after finding the gold for the first time
  position(X, Y) and gold(X, Y) and not found_gold(_) and moves(M) => obey(find_gold) and found_gold(M).

  // if the remaining moves are 0, the agent is at the chest and delivered the gold,
  // then the shortest path has been chosen after picking up the gold
  moves(M) and picked_up_gold(P) and add(P, 3, M) and position(X, Y) and chest(X, Y) and dropped_gold(M) => obey(shortest_path).

  // if the remaining moves have been exceeded and the gold has not been dropped,
  // then the agent failed to find the shortest path after picking up the gold
  moves(M) and picked_up_gold(P) and add(P, 4, M) and not dropped_gold(_) => viol(shortest_path).

  // if the agent has not moved before picking up the gold,
  // then he obeys the immediate pickup property
  moves(M) and found_gold(M) and picked_up_gold(M) => obey(immediate_pickup).

  // otherwise he violates it
  moves(M) and found_gold(F) and add(F, 1, M) and not picked_up_gold(F) => viol(immediate_pickup).

  // if the agent is at the chest and dropped the gold,
  // then he obeyed to deliver the gold
  moves(M) and position(X, Y) and chest(X, Y) and dropped_gold(M) => obey(deliver_gold).

Sanction rules:
  // standing on a pit is punished with deduction of 1 point
  viol(dont_stand_on_pit) and points(P) and add(P, -1, NP) and pitpoints(PP) and add(PP, -1, NPP) =>
    not viol(dont_stand_on_pit) and // remove violation
    points(NP) and not points(P) and pitpoints(NPP) and not pitpoints(PP) and show(stood_on_pit, NPP). // update points and show notification

  // finding the gold is rewarded with 3 points
  obey(find_gold) and points(P) and add(P, 3, NP) =>
    not obey(find_gold) and // remove obligation
    points(NP) and not points(P) and show(found_gold, 3). // update points and show notification

  // not taking the shortest path is punished with deduction of 1 point
  viol(shortest_path) and points(P) and add(P, -1, NP) =>
    not viol(shortest_path) and // remove violation
    points(NP) and not points(P) and show(shortest_path, -1). // update points and show notification

  // immediately picking up the gold after finding it is rewarded with 1 point
  obey(immediate_pickup) and points(P) and add(P, 1, NP) =>
    not obey(immediate_pickup) and // remove obligation
    points(NP) and not points(P) and show(picked_up_gold, 1). // update points and show notification

  // not immediately picking up the gold after finding it is punished with deduction of 1 point
  viol(immediate_pickup) and points(P) and add(P, -4, NP) =>
    not viol(immediate_pickup) and // remove violation
    points(NP) and not points(P) and show(picked_up_gold, -4). // update points and show notification

  // delivering the gold without taking the shortest path is rewarded with 4 points
  obey(deliver_gold) and not obey(shortest_path) and points(P) and add(P, 4, NP) =>
    not obey(deliver_gold) and // remove obligation
    points(NP) and not points(P) and /* not dropped_gold and */ show(delivered_gold, 4) and show(final_grade, NP). // update points and show notification

  // delivering the gold and taking the shortest path is rewarded with 6 points
  obey(deliver_gold) and obey(shortest_path) and points(P) and add(P, 6, NP) =>
    not obey(deliver_gold) and not obey(shortest_path) and // remove obligations
    // not dropped_gold and // remove the info that the gold has been dropped
    points(NP) and not points(P) and show(delivered_gold, 4) and show(shortest_path, 2) and show(final_grade, NP). // update points and show notification

  // standing on the wumpus is punished with deduction of 4 points
  viol(dont_stand_on_wumpus(X, Y)) and points(P) and add(P, -4, NP) =>
    not viol(dont_stand_on_wumpus(X, Y)) and // remove violation
    do_bombard and not wumpus(X, Y) and // murder the Wumpus
    points(NP) and not points(P) and show(stood_on_wumpus, -4). // update points and show notification

  // plays the killing Wumpus animation
  do_bombard, @external(gui,bombard_wumpus,_) =>
    not do_bombard.

  // shows a topic with a grade in the notification area
  show(Topic, Grade), description(Topic, Desc), int_to_atom(Grade, GradeAtom), atom_concat(Desc, GradeAtom, Msg), @external(gui, show_notice(Topic, Msg), _) =>
    not show(Topic, Grade).
