//
// Solution with temporal norms.
//

Facts:
  // model of the world
  chest(1, 1).

  // this fact will be removed once the Wumpus is dead
  wumpus(1, 3).

  pit(3, 1).
  pit(3, 3).
  pit(4, 4).
  gold(2, 3).

  // the agent stands on the chest initially
  position(1, 1).

  // keeps track of the moves
  moves(0).

  // no points initially
  points(0).

  // accumulated penalties for standing on pits
  pitpoints(0).

  // description texts
  description(final_grade, 'Final grade: ').
  description(found_gold, 'Found the gold: ').
  description(picked_up_gold, 'Picked up the gold: ').
  description(stood_on_pit, 'Stood on pit: ').
  description(delivered_gold, 'Delivered the gold: ').
  description(shortest_path, 'Shortest path: ').
  description(stood_on_wumpus, 'Stood on wumpus: ').

  // addition
  add(X, Y, Z) :- Z is X + Y.

Effects:
  // movement, increase number of moves
  { position(X, Y) and add(X, DX, NX) and add(Y, DY, NY) and moves(M) and add(M, 1, NM) }
    move(DX, DY)
  { not position(X, Y) and position(NX, NY) and not moves(M) and moves(NM) }

  // picking up the gold
  // only possible if there is gold at the current position
  // remember when the gold has been picked up
  { position(X, Y) and gold(X, Y) and moves(M) }
    gripper(pickup)
  { picked_up_gold(M) and not gold(X, Y) }

  // dropping the gold
  // only possible if the agent is at the chest and carries gold
  // remember when the gold has been dropped
  { position(X, Y) and chest(X, Y) and picked_up_gold(_) and not dropped_gold(_) and moves(M) }
    gripper(drop)
  { dropped_gold(M) }

Temporal norms:
  // finding the gold is an obligation without a deadline
  find_gold: [not found_gold(_), O(position(X, Y) and gold(X, Y)), false]

  // if the agent has not moved before picking up the gold,
  // then he obeys the immediate pickup property
  // this is a bit of a hack that is necessary because found_gold is 
  // only set in the cycle AFTER the gold has actually been found.
  immediate_pickup: [found_gold(F) and add(F,1,M) and moves(F) and picked_up_gold(F), O(picked_up_gold(F)), moves(M)]
  immediate_pickup: [found_gold(F) and add(F,1,M) and moves(M) and not picked_up_gold(_), O(picked_up_gold(F)), moves(M)]

  // the agent is obliged to deliver the gold to the chest, but there is no deadline
  deliver_gold: [true, O(moves(M) and position(X, Y) and chest(X, Y) and dropped_gold(M)), false]

  // the gold must be delivered at most three moves after picking it up,
  // meaning that 4 moves after that the deadline is over
  shortest_path: [picked_up_gold(P) and add(P,4,F) and add(P,3,O), O(position(X, Y) and chest(X, Y) and dropped_gold(O)), moves(F)]

  // standing on a living wumpus is always a violation
  dont_stand_on_wumpus(X,Y): [true, F(position(X, Y) and wumpus(X, Y)), false]

  // standing on a pit is always a violation (i.e. no precondition, no deadline)
  dont_stand_on_pit: [true, F(position(X,Y) and pit(X,Y)), false]

Sanction rules:
  // standing on a pit is punished with deduction of 1 point
  viol(dont_stand_on_pit) and points(P) and add(P, -1, NP) and pitpoints(PP) and add(PP, -1, NPP) =>
    not viol(dont_stand_on_pit) and // remove violation
    points(NP) and not points(P) and pitpoints(NPP) and not pitpoints(PP) and show(stood_on_pit, NPP). // update points and show notification

  // finding the gold is rewarded with 3 points
  obey(find_gold) and points(P) and add(P, 3, NP) and moves(M) =>
    found_gold(M) and // add found_gold (not possible in norm)
    not obey(find_gold) and // remove obligation
    points(NP) and not points(P) and show(found_gold, 3). // update points and show notification

  // not taking the shortest path is punished with deduction of 1 point
  viol(shortest_path) and points(P) and add(P, -1, NP) =>
    not viol(shortest_path) and // remove violation
    points(NP) and not points(P) and show(shortest_path, -1). // update points and show notification

  // immediately picking up the gold after finding it is rewarded with 1 point
  obey(immediate_pickup) and points(P) and add(P, 1, NP) =>
    not obey(immediate_pickup) and // remove obligation
    points(NP) and not points(P) and show(picked_up_gold, 1). // update points and show notification

  // not immediately picking up the gold after finding it is punished with deduction of 1 point
  viol(immediate_pickup) and points(P) and add(P, -4, NP) =>
    not viol(immediate_pickup) and // remove violation
    points(NP) and not points(P) and show(picked_up_gold, -4). // update points and show notification

  // delivering the gold without taking the shortest path is rewarded with 4 points
  obey(deliver_gold) and not obey(shortest_path) and points(P) and add(P, 4, NP) =>
    not obey(deliver_gold) and // remove obligation
    points(NP) and not points(P) and show(delivered_gold, 4) and show(final_grade, NP). // update points and show notification

  // delivering the gold and taking the shortest path is rewarded with 6 points
  obey(deliver_gold) and obey(shortest_path) and points(P) and add(P, 6, NP) =>
    not obey(deliver_gold) and not obey(shortest_path) and // remove obligations
    points(NP) and not points(P) and show(delivered_gold, 4) and show(shortest_path, 2) and show(final_grade, NP). // update points and show notification

  // standing on the wumpus is punished with deduction of 4 points
  viol(dont_stand_on_wumpus(X, Y)) and points(P) and add(P, -4, NP) =>
    not viol(dont_stand_on_wumpus(X, Y)) and // remove violation
    do_bombard and not wumpus(X, Y) and // murder the Wumpus
    points(NP) and not points(P) and show(stood_on_wumpus, -4). // update points and show notification

  // plays the killing Wumpus animation
  do_bombard, @external(gui, bombard_wumpus, _) =>
    not do_bombard. // remove

  // shows a topic with a grade in the notification area
  show(Topic, Grade), description(Topic, Desc), int_to_atom(Grade, GradeAtom), atom_concat(Desc, GradeAtom, Msg), @external(gui, show_notice(Topic, Msg), _) =>
    not show(Topic, Grade). // remove
